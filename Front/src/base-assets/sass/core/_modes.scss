// Dynamic modes allow us to manage light and dark color schemes by toggling a single custom property.

@mixin modes {
    // On the CCS root, we check the user's color-scheme preference, to set `--color-mode--os`, which provides a dynamic default value.
    :root {
        --color-mode--os: 1;

        @media (prefers-color-scheme: dark) {
            --color-mode--os: -1;
        }
    }

    // Each instance of the color system will re-calculate the "cascade" of mode origins
    // (`1` for a "light" background and `-1` for a "dark" background), along with a `--color-invert` which reverses the numbers.
    // There is also variables for weather color mode is active `1` or inactive `0`
    [data-color-mode] {
        --color-mode--cascade: var(--color-mode--html, var(--color-mode--user, var(--color-mode--os, 1)));
        --color-mode: var(--color-mode--cascade, 1);
        --color-invert: calc(-1 * var(--color-mode));
        --light-active: calc((var(--color-mode) + 1) * 0.5);
        --dark-active: calc((var(--color-invert) + 1) * 0.5);
    }

    // Set "light" mode explicitly in HTML Vue template.
    [data-color-mode='light'] {
        --color-mode--html: 1;
    }

    // Set "dark" mode explicitly in HTML Vue template.
    [data-color-mode='dark'] {
        --color-mode--html: -1;
    }

    // Dynamic inversion will flip light/dark mode in a nested context (one level deep).
    [data-color-mode='invert'] {
        --color-mode: calc(-1 * var(--color-mode--cascade, 1));
    }
}

@function if-mode($light, $dark) {
    @return calc(
        var(--light-active) * #{$light} + var(--dark-active) * #{$dark}
    );
}
